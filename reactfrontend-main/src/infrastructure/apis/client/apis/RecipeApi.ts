/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RecipeAddDTO,
  RecipeDTOPagedResponseRequestResponse,
  RecipeDTORequestResponse,
  RecipeUpdateDTO,
  RequestResponse,
} from '../models/index';
import {
    RecipeAddDTOFromJSON,
    RecipeAddDTOToJSON,
    RecipeDTOPagedResponseRequestResponseFromJSON,
    RecipeDTOPagedResponseRequestResponseToJSON,
    RecipeDTORequestResponseFromJSON,
    RecipeDTORequestResponseToJSON,
    RecipeUpdateDTOFromJSON,
    RecipeUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiRecipeAddPostRequest {
    recipeAddDTO?: RecipeAddDTO;
}

export interface ApiRecipeDeleteIdDeleteRequest {
    id: string;
}

export interface ApiRecipeGetByIdIdGetRequest {
    id: string;
}

export interface ApiRecipeGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiRecipeUpdatePutRequest {
    recipeUpdateDTO?: RecipeUpdateDTO;
}

/**
 *
 */
export class RecipeApi extends runtime.BaseAPI {

    /**
     */
    async apiRecipeAddPostRaw(requestParameters: ApiRecipeAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipe/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeAddDTOToJSON(requestParameters['recipeAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRecipeAddPost(requestParameters: ApiRecipeAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiRecipeAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRecipeDeleteIdDeleteRaw(requestParameters: ApiRecipeDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipeDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipe/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRecipeDeleteIdDelete(requestParameters: ApiRecipeDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiRecipeDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRecipeGetByIdIdGetRaw(requestParameters: ApiRecipeGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipeGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipe/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRecipeGetByIdIdGet(requestParameters: ApiRecipeGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeDTORequestResponse> {
        const response = await this.apiRecipeGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRecipeGetPageGetRaw(requestParameters: ApiRecipeGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        // Debug log for URL and headers
        const url = this.configuration.basePath + '/api/Recipe/GetPage';

        const response = await this.request({
            path: `/api/Recipe/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRecipeGetPageGet(requestParameters: ApiRecipeGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeDTOPagedResponseRequestResponse> {
        const response = await this.apiRecipeGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRecipeUpdatePutRaw(requestParameters: ApiRecipeUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipe/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeUpdateDTOToJSON(requestParameters['recipeUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRecipeUpdatePut(requestParameters: ApiRecipeUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiRecipeUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
