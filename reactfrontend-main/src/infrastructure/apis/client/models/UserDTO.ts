/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecipeDTO } from './RecipeDTO';
import {
    RecipeDTOFromJSON,
    RecipeDTOFromJSONTyped,
    RecipeDTOToJSON,
    RecipeDTOToJSONTyped,
} from './RecipeDTO';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
    CommentToJSONTyped,
} from './Comment';
import type { PostDTO } from './PostDTO';
import {
    PostDTOFromJSON,
    PostDTOFromJSONTyped,
    PostDTOToJSON,
    PostDTOToJSONTyped,
} from './PostDTO';
import type { UserRoleEnum } from './UserRoleEnum';
import {
    UserRoleEnumFromJSON,
    UserRoleEnumFromJSONTyped,
    UserRoleEnumToJSON,
    UserRoleEnumToJSONTyped,
} from './UserRoleEnum';

/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    email: string;
    /**
     *
     * @type {UserRoleEnum}
     * @memberof UserDTO
     */
    role: UserRoleEnum;
    /**
     *
     * @type {Array<UserDTO>}
     * @memberof UserDTO
     */
    following: Array<UserDTO>;
    /**
     *
     * @type {Array<PostDTO>}
     * @memberof UserDTO
     */
    posts: Array<PostDTO>;
    /**
     *
     * @type {Array<Comment>}
     * @memberof UserDTO
     */
    comments: Array<Comment>;
    /**
     *
     * @type {Array<RecipeDTO>}
     * @memberof UserDTO
     */
    recipes: Array<RecipeDTO>;
}



/**
 * Check if a given object implements the UserDTO interface.
 */
export function instanceOfUserDTO(value: object): value is UserDTO {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('following' in value) || value['following'] === undefined) return false;
    if (!('posts' in value) || value['posts'] === undefined) return false;
    if (!('comments' in value) || value['comments'] === undefined) return false;
    if (!('recipes' in value) || value['recipes'] === undefined) return false;
    return true;
}

export function UserDTOFromJSON(json: any): UserDTO {
    return UserDTOFromJSONTyped(json, false);
}

export function UserDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDTO {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'name': json['name'],
        'email': json['email'],
        'role': UserRoleEnumFromJSON(json['role']),
        'following': Array.isArray(json['following']) ? json['following'].map(UserDTOFromJSON) : [],
        'posts': Array.isArray(json['posts']) ? json['posts'].map(PostDTOFromJSON) : [],
        'comments': Array.isArray(json['comments']) ? json['comments'].map(CommentFromJSON) : [],
        'recipes': Array.isArray(json['recipes']) ? json['recipes'].map(RecipeDTOFromJSON) : [],
    };
}

export function UserDTOToJSON(json: any): UserDTO {
    return UserDTOToJSONTyped(json, false);
}

export function UserDTOToJSONTyped(value?: UserDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {

        'id': value['id'],
        'name': value['name'],
        'email': value['email'],
        'role': UserRoleEnumToJSON(value['role']),
        'following': ((value['following'] as Array<any>).map(UserDTOToJSON)),
        'posts': ((value['posts'] as Array<any>).map(PostDTOToJSON)),
        'comments': ((value['comments'] as Array<any>).map(CommentToJSON)),
        'recipes': ((value['recipes'] as Array<any>).map(RecipeDTOToJSON)),
    };
}

