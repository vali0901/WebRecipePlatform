/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
    CommentToJSONTyped,
} from './Comment';
import type { Recipe } from './Recipe';
import {
    RecipeFromJSON,
    RecipeFromJSONTyped,
    RecipeToJSON,
    RecipeToJSONTyped,
} from './Recipe';
import type { Post } from './Post';
import {
    PostFromJSON,
    PostFromJSONTyped,
    PostToJSON,
    PostToJSONTyped,
} from './Post';
import type { UserRoleEnum } from './UserRoleEnum';
import {
    UserRoleEnumFromJSON,
    UserRoleEnumFromJSONTyped,
    UserRoleEnumToJSON,
    UserRoleEnumToJSONTyped,
} from './UserRoleEnum';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof User
     */
    role: UserRoleEnum;
    /**
     * 
     * @type {Array<User>}
     * @memberof User
     */
    following: Array<User>;
    /**
     * 
     * @type {Array<Post>}
     * @memberof User
     */
    posts: Array<Post>;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof User
     */
    comments: Array<Comment>;
    /**
     * 
     * @type {Array<Recipe>}
     * @memberof User
     */
    recipes: Array<Recipe>;
}



/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('following' in value) || value['following'] === undefined) return false;
    if (!('posts' in value) || value['posts'] === undefined) return false;
    if (!('comments' in value) || value['comments'] === undefined) return false;
    if (!('recipes' in value) || value['recipes'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'name': json['name'],
        'email': json['email'],
        'password': json['password'],
        'role': UserRoleEnumFromJSON(json['role']),
        'following': ((json['following'] as Array<any>).map(UserFromJSON)),
        'posts': ((json['posts'] as Array<any>).map(PostFromJSON)),
        'comments': ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'recipes': ((json['recipes'] as Array<any>).map(RecipeFromJSON)),
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'name': value['name'],
        'email': value['email'],
        'password': value['password'],
        'role': UserRoleEnumToJSON(value['role']),
        'following': ((value['following'] as Array<any>).map(UserToJSON)),
        'posts': ((value['posts'] as Array<any>).map(PostToJSON)),
        'comments': ((value['comments'] as Array<any>).map(CommentToJSON)),
        'recipes': ((value['recipes'] as Array<any>).map(RecipeToJSON)),
    };
}

